KCPSM6 Assembler log file for program 'Z:\home\dean\public_html\Xilinx\Flight Simulator\src\roms\ptest.psm'.
Generated by KCPSM6 version v2.51
Ken Chapman - Xilinx Ltd - 29th May 2013

Assembly datestamp: 06 Nov 2013
Assembly timestamp: 14:07:15

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 07E hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 127
Memory locations available: 3969


Assembly listing

 Addr Code                 Instruction

 000                       NAMEREG sD, COUNTER1
 000                       NAMEREG sC, SPI_BIT_COUNT
 000                       NAMEREG sA, ADDRLOW
 000                       NAMEREG sB, ADDRHIGH
 000                       NAMEREG s9, RXREG
 000                       NAMEREG s8, SPI_HIGH
 000                       NAMEREG s7, SPI_LOW
 000                       NAMEREG s6, SPI_DATA
 000                       NAMEREG s5, LEDCOUNT
 000                       NAMEREG s4, BUFPTR
 000                       ;; input ports
 000                       CONSTANT UART_STATUS_PORT, 00000000'b
 000                       CONSTANT UART_RX_PORT, 00000001'b
 000                       ;; constant out ports
 000                       CONSTANT UART_TX_RESET_PORT, 0F
 000                       ;; output ports
 000                       CONSTANT UART_TX_PORT, 10000000'b
 000                       CONSTANT LED_PORT, 01000000'b
 000                       CONSTANT SPI_PORT, 11000000'b
 000                       CONSTANT START0, 00
 000                       CONSTANT START1, 01
 000                       CONSTANT START2, 02
 000                       CONSTANT START3, 03
 000                       CONSTANT START4, 04
 000                       CONSTANT START5, 05
 000                       CONSTANT START6, 06
 000                       CONSTANT START7, 07
 000                       CONSTANT START8, 08
 000                       CONSTANT START9, 09
 000                       CONSTANT START10, 0A
 000                       CONSTANT START11, 0B
 000                       CONSTANT START12, 0C
 000                       CONSTANT START13, 0D
 000                       CONSTANT START14, 0E
 000                       CONSTANT START15, 0F
 000                       CONSTANT STOP0, 10
 000                       CONSTANT STOP1, 11
 000                       CONSTANT STOP2, 12
 000                       CONSTANT STOP3, 13
 000                       CONSTANT STOP4, 14
 000                       CONSTANT STOP5, 15
 000                       CONSTANT STOP6, 16
 000                       CONSTANT STOP7, 17
 000                       CONSTANT STOP8, 18
 000                       CONSTANT STOP9, 19
 000                       CONSTANT STOP10, 1A
 000                       CONSTANT STOP11, 1B
 000                       CONSTANT STOP12, 1C
 000                       CONSTANT STOP13, 1D
 000                       CONSTANT STOP14, 1E
 000                       CONSTANT STOP15, 1F
 000                       CONSTANT INITPORT, 0F
 000                       ;; spi bits
 000                       CONSTANT spi_clk, 00000001'b          ;   spi_clk - bit0 (SPI_output_por0t)
 000                       CONSTANT spi_cs, 00000010'b           ;  spi_cs - bit1 (SPI_output_port)
 000                       CONSTANT spi_mosi, 10000000'b         ;  spi_mosi - bit7 (SPI_output_port)
 000                       ;; status signals
 000                       CONSTANT UART_TX_FULL, 00000100'b
 000                       CONSTANT UART_RX_READY, 00001000'b
 000                       ;; constants
 000  2BFFF                OUTPUTK FF, F[UART_TX_RESET_PORT]
 001  2B00F                OUTPUTK 00, F[UART_TX_RESET_PORT]
 002  01B00                LOAD sB[ADDRHIGH], 00[dean'upper]
 003  01A2B                LOAD sA[ADDRLOW], 2B[dean'lower]
 004  20024                CALL 024[send_string]
 005  01808                LOAD s8[SPI_HIGH], 08
 006  01700                LOAD s7[SPI_LOW], 00
 007  2006B                CALL 06B[send_spi]
 008  01813                LOAD s8[SPI_HIGH], 13
 009  01733                LOAD s7[SPI_LOW], 33
 00A  2006B                CALL 06B[send_spi]
 00B  0182F                LOAD s8[SPI_HIGH], 2F
 00C  017FF                LOAD s7[SPI_LOW], FF
 00D  2006B                CALL 06B[send_spi]
 00E  0183F                LOAD s8[SPI_HIGH], 3F
 00F  017FF                LOAD s7[SPI_LOW], FF
 010  2006B                CALL 06B[send_spi]
 011  01500                LOAD s5[LEDCOUNT], 00
 012  2D540     STARTLOOP: OUTPUT s5[LEDCOUNT], 40[LED_PORT]
 013  09100                INPUT s1, 00[UART_STATUS_PORT]
 014  0D108                TEST s1, 08[UART_RX_READY]
 015  3E012                JUMP NC, 012[STARTLOOP]
 016  09001                INPUT s0, 01[UART_RX_PORT]
 017  00500                LOAD s5[LEDCOUNT], s0
 018  2001F                CALL 01F[send_to_UART]
 019  22012                JUMP 012[STARTLOOP]
 01A  01D10        sdelay: LOAD sD[COUNTER1], 10
 01B  2201C                JUMP 01C[DLOOP]
 01C  19D01         DLOOP: SUB sD[COUNTER1], 01
 01D  3601C                JUMP NZ, 01C[DLOOP]
 01E  25000                RETURN 
 01F  09100  send_to_UART: INPUT s1, 00[UART_STATUS_PORT]
 020  0D104                TEST s1, 04[UART_TX_FULL]
 021  3601F                JUMP NZ, 01F[send_to_UART]
 022  2D080                OUTPUT s0, 80[UART_TX_PORT]
 023  25000                RETURN 
 024  24BA0   send_string: CALL@ (sB[ADDRHIGH], sA[ADDRLOW])
 025  2001F                CALL 01F[send_to_UART]
 026  1D00D                COMPARE s0, 0D
 027  31000                RETURN Z
 028  11A01                ADD sA[ADDRLOW], 01
 029  13B00                ADDCY sB[ADDRHIGH], 00
 02A  22024                JUMP 024[send_string]
 02B                       STRING dean$, "Hello, Dean!"
 02B  21048          dean: LOAD&RETURN s0, 48[dean$:"H"]
 02C  21065                LOAD&RETURN s0, 65[dean$:"e"]
 02D  2106C                LOAD&RETURN s0, 6C[dean$:"l"]
 02E  2106C                LOAD&RETURN s0, 6C[dean$:"l"]
 02F  2106F                LOAD&RETURN s0, 6F[dean$:"o"]
 030  2102C                LOAD&RETURN s0, 2C[dean$:","]
 031  21020                LOAD&RETURN s0, 20[dean$:" "]
 032  21044                LOAD&RETURN s0, 44[dean$:"D"]
 033  21065                LOAD&RETURN s0, 65[dean$:"e"]
 034  21061                LOAD&RETURN s0, 61[dean$:"a"]
 035  2106E                LOAD&RETURN s0, 6E[dean$:"n"]
 036  21021                LOAD&RETURN s0, 21[dean$:"!"]
 037  2100A                LOAD&RETURN s0, 0A
 038  2100D                LOAD&RETURN s0, 0D
 039                       STRING error$, "Error, invalid input."
 039  21045         error: LOAD&RETURN s0, 45[error$:"E"]
 03A  21072                LOAD&RETURN s0, 72[error$:"r"]
 03B  21072                LOAD&RETURN s0, 72[error$:"r"]
 03C  2106F                LOAD&RETURN s0, 6F[error$:"o"]
 03D  21072                LOAD&RETURN s0, 72[error$:"r"]
 03E  2102C                LOAD&RETURN s0, 2C[error$:","]
 03F  21020                LOAD&RETURN s0, 20[error$:" "]
 040  21069                LOAD&RETURN s0, 69[error$:"i"]
 041  2106E                LOAD&RETURN s0, 6E[error$:"n"]
 042  21076                LOAD&RETURN s0, 76[error$:"v"]
 043  21061                LOAD&RETURN s0, 61[error$:"a"]
 044  2106C                LOAD&RETURN s0, 6C[error$:"l"]
 045  21069                LOAD&RETURN s0, 69[error$:"i"]
 046  21064                LOAD&RETURN s0, 64[error$:"d"]
 047  21020                LOAD&RETURN s0, 20[error$:" "]
 048  21069                LOAD&RETURN s0, 69[error$:"i"]
 049  2106E                LOAD&RETURN s0, 6E[error$:"n"]
 04A  21070                LOAD&RETURN s0, 70[error$:"p"]
 04B  21075                LOAD&RETURN s0, 75[error$:"u"]
 04C  21074                LOAD&RETURN s0, 74[error$:"t"]
 04D  2102E                LOAD&RETURN s0, 2E[error$:"."]
 04E  2100A                LOAD&RETURN s0, 0A
 04F  2100D                LOAD&RETURN s0, 0D
 050  0100A     next_line: LOAD s0, 0A
 051  2D080                OUTPUT s0, 80[UART_TX_PORT]
 052  0100D                LOAD s0, 0D
 053  2D080                OUTPUT s0, 80[UART_TX_PORT]
 054  25000                RETURN 
 055  01B00     error_msg: LOAD sB[ADDRHIGH], 00[error'upper]
 056  01A39                LOAD sA[ADDRLOW], 39[error'lower]
 057  20024                CALL 024[send_string]
 058  25000                RETURN 
 059  1D961    upper_case: COMPARE s9[RXREG], 61["a"]            ;eliminate character codes below 'a' (61 hex)
 05A  39000                RETURN C
 05B  1D97B                COMPARE s9[RXREG], 7B                 ;eliminate character codes above 'z' (7A hex)
 05C  3D000                RETURN NC
 05D  039DF                AND s9[RXREG], DF[11011111'b]         ;force bit5 Low to convert to upper case
 05E  25000                RETURN 
 05F  119B9  ASCII_to_hex: ADD s9[RXREG], B9                     ;test for above ASCII code 46 ('F')
 060  39000                RETURN C
 061  199E9                SUB s9[RXREG], E9                     ;normalise 0 to 9 with A-F in 11 to 16 hex
 062  39000                RETURN C                              ;reject below ASCII code 30 ('0')
 063  19911                SUB s9[RXREG], 11                     ;isolate A-F down to 00 to 05 hex
 064  3E069                JUMP NC, 069[ASCII_letter]
 065  11907                ADD s9[RXREG], 07                     ;test for above ASCII code 46 ('F')
 066  39000                RETURN C
 067  199F6                SUB s9[RXREG], F6                     ;convert to range 00 to 09
 068  25000                RETURN 
 069  1190A  ASCII_letter: ADD s9[RXREG], 0A                     ;convert to range 0A to 0F
 06A  25000                RETURN 
 06B                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;; SPI
 06B  01C10      send_spi: LOAD sC[SPI_BIT_COUNT], 10
 06C  00680      next_bit: LOAD s6[SPI_DATA], s8[SPI_HIGH]
 06D  03680                AND s6[SPI_DATA], 80[spi_mosi]
 06E  2D6C0                OUTPUT s6[SPI_DATA], C0[SPI_PORT]
 06F  14706                SL0 s7[SPI_LOW]
 070  14800                SLA s8[SPI_HIGH]
 071  20079                CALL 079[clock_pulse]
 072  19C01                SUB sC[SPI_BIT_COUNT], 01
 073  3606C                JUMP NZ, 06C[next_bit]
 074  01602                LOAD s6[SPI_DATA], 02[spi_cs]
 075  05601                OR s6[SPI_DATA], 01[spi_clk]
 076  2D6C0                OUTPUT s6[SPI_DATA], C0[SPI_PORT]
 077  2001A                CALL 01A[sdelay]
 078  25000                RETURN 
 079  05601   clock_pulse: OR s6[SPI_DATA], 01[spi_clk]
 07A  2D6C0                OUTPUT s6[SPI_DATA], C0[SPI_PORT]
 07B  036FE                AND s6[SPI_DATA], FE[~spi_clk]
 07C  2001A                CALL 01A[sdelay]
 07D  2D6C0                OUTPUT s6[SPI_DATA], C0[SPI_PORT]
 07E  25000                RETURN 



List of PSM files that have been assembled

Z:\home\dean\public_html\Xilinx\Flight Simulator\src\roms\ptest.psm



List of defined constants

 CONSTANT name      Value        Source PSM File

 timestamp_hours    14'd         
 timestamp_minutes  07'd         
 timestamp_seconds  15'd         
 datestamp_year     13'd         
 datestamp_month    11'd         
 datestamp_day      06'd         
 NUL                00           
 BEL                07           
 BS                 08           
 HT                 09           
 LF                 0A           
 VT                 0B           
 CR                 0D           
 ESC                1B           
 DEL                7F           
 DCS                90           
 ST                 9C           
 UART_STATUS_PORT   00000000'b   ptest.psm
 UART_RX_PORT       00000001'b   ptest.psm
 UART_TX_RESET_PORT 0F           ptest.psm
 UART_TX_PORT       10000000'b   ptest.psm
 LED_PORT           01000000'b   ptest.psm
 SPI_PORT           11000000'b   ptest.psm
 START0             00           ptest.psm
 START1             01           ptest.psm
 START2             02           ptest.psm
 START3             03           ptest.psm
 START4             04           ptest.psm
 START5             05           ptest.psm
 START6             06           ptest.psm
 START7             07           ptest.psm
 START8             08           ptest.psm
 START9             09           ptest.psm
 START10            0A           ptest.psm
 START11            0B           ptest.psm
 START12            0C           ptest.psm
 START13            0D           ptest.psm
 START14            0E           ptest.psm
 START15            0F           ptest.psm
 STOP0              10           ptest.psm
 STOP1              11           ptest.psm
 STOP2              12           ptest.psm
 STOP3              13           ptest.psm
 STOP4              14           ptest.psm
 STOP5              15           ptest.psm
 STOP6              16           ptest.psm
 STOP7              17           ptest.psm
 STOP8              18           ptest.psm
 STOP9              19           ptest.psm
 STOP10             1A           ptest.psm
 STOP11             1B           ptest.psm
 STOP12             1C           ptest.psm
 STOP13             1D           ptest.psm
 STOP14             1E           ptest.psm
 STOP15             1F           ptest.psm
 INITPORT           0F           ptest.psm
 spi_clk            00000001'b   ptest.psm
 spi_cs             00000010'b   ptest.psm
 spi_mosi           10000000'b   ptest.psm
 UART_TX_FULL       00000100'b   ptest.psm
 UART_RX_READY      00001000'b   ptest.psm



No TABLEs defined



List of text strings

 STRING name       String                   Source PSM File

 KCPSM6_version$   "v2.51"                  
 datestamp$        "06 Nov 2013"            
 timestamp$        "14:07:15"               
 dean$             "Hello, Dean!"           ptest.psm
 error$            "Error, invalid input."  ptest.psm



List of line labels

   Label          Addr  Source PSM File

   STARTLOOP      012   ptest.psm
   sdelay         01A   ptest.psm
   DLOOP          01C   ptest.psm
   send_to_UART   01F   ptest.psm
   send_string    024   ptest.psm
   dean           02B   ptest.psm
   error          039   ptest.psm
 * next_line      050   ptest.psm
 * error_msg      055   ptest.psm
 * upper_case     059   ptest.psm
 * ASCII_to_hex   05F   ptest.psm
   ASCII_letter   069   ptest.psm
   send_spi       06B   ptest.psm
   next_bit       06C   ptest.psm
   clock_pulse    079   ptest.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             20
 STAR              -

 AND               3
 OR                2
 XOR               -

 ADD               4
 ADDCY             1
 SUB               5
 SUBCY             -

 TEST              2
 TESTCY            -
 COMPARE           3
 COMPARECY         -

 SL0               1
 SL1               -
 SLX               -
 SLA               1
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             3
 OUTPUT            8
 OUTPUTK           2

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP              8
 JUMP@             -
 CALL             11
 CALL@             1
 RETURN           15
 LOAD&RETURN      37

 HWBUILD           -



End of KCPSM6 log file.
