KCPSM6 Assembler log file for program 'Z:\home\dean\public_html\Xilinx\testpulses\src\roms\uart_test.psm'.
Generated by KCPSM6 version v2.51
Ken Chapman - Xilinx Ltd - 29th May 2013

Assembly datestamp: 31 Jan 2014
Assembly timestamp: 14:59:11

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 2DC hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 733
Memory locations available: 3363


Assembly listing

 Addr Code                     Instruction

 000                           NAMEREG sD, COUNTER1
 000                           NAMEREG sC, SPI_BIT_COUNT
 000                           NAMEREG sA, ADDRLOW
 000                           NAMEREG sB, ADDRHIGH
 000                           NAMEREG s9, RXREG
 000                           NAMEREG s8, SPI_HIGH
 000                           NAMEREG s7, SPI_LOW
 000                           NAMEREG s6, SPI_DATA
 000                           NAMEREG s5, LEDCOUNT
 000                           NAMEREG s4, BUFPTR
 000                           ;; input ports
 000                           CONSTANT UART_STATUS_PORT, 00000000'b
 000                           CONSTANT UART_RX_PORT, 00000001'b
 000                           ;; constant out ports
 000                           CONSTANT UART_TX_RESET_PORT, 00
 000                           ;; output ports
 000                           ;; CONSTANT INITPORT    , 00001000'b
 000                           ;; CONSTANT ONCEPORT    , 00001001'b
 000                           ;; CONSTANT UART_TX_PORT, 00000001'b
 000                           ;; CONSTANT LED_PORT,     00000010'b
 000                           ;; CONSTANT SPI_PORT,     00000011'b
 000                           ;; CONSTANT PERIOD_PORT0, 01000000'b
 000                           ;; CONSTANT PERIOD_PORT1, 01000001'b
 000                           ;; CONSTANT PERIOD_PORT2, 01000010'b
 000                           ;; CONSTANT PULSE_PERIOD_PORT0, 01000100'b
 000                           ;; CONSTANT PULSE_PERIOD_PORT1, 01000101'b
 000                           ;; CONSTANT PULSE_PERIOD_PORT2, 01000110'b
 000                           CONSTANT LED_PORT, 00000011'b
 000                           CONSTANT SPI_PORT, 00010011'b
 000                           CONSTANT ONCEPORT, 00100011'b
 000                           CONSTANT INITPORT, 00110011'b
 000                           CONSTANT PERIOD_PORT2, 01000011'b
 000                           CONSTANT PERIOD_PORT1, 01010011'b
 000                           CONSTANT PERIOD_PORT0, 01100011'b
 000                           CONSTANT PULSE_PERIOD_PORT2, 01110011'b
 000                           CONSTANT PULSE_PERIOD_PORT1, 10000011'b
 000                           CONSTANT PULSE_PERIOD_PORT0, 10010011'b
 000                           CONSTANT UART_TX_PORT, 11110011'b
 000                           ;; spi bits
 000                           CONSTANT spi_clk, 00000001'b            ;   spi_clk - bit0 (SPI_output_por0t)
 000                           CONSTANT spi_cs, 00000010'b             ;  spi_cs - bit1 (SPI_output_port)
 000                           CONSTANT spi_mosi, 10000000'b           ;  spi_mosi - bit7 (SPI_output_port)
 000                           ;; status signals
 000                           CONSTANT UART_TX_FULL, 00000100'b
 000                           CONSTANT UART_RX_READY, 00001000'b
 000                           ;; constants
 000  2BFF0                    OUTPUTK FF, 0[UART_TX_RESET_PORT]
 001  2B000                    OUTPUTK 00, 0[UART_TX_RESET_PORT]
 002  0101B                    LOAD s0, 1B
 003  20031                    CALL 031[send_to_UART]
 004  0105B                    LOAD s0, 5B
 005  20031                    CALL 031[send_to_UART]
 006  01032                    LOAD s0, 32
 007  20031                    CALL 031[send_to_UART]
 008  0104A                    LOAD s0, 4A
 009  20031                    CALL 031[send_to_UART]
 00A                           ;; LOAD ADDRHIGH, dean'upper
 00A                           ;; LOAD ADDRLOW, dean'lower
 00A                           ;; CALL send_string
 00A  20172                    CALL 172[display_help]
 00B  01602                    LOAD s6[SPI_DATA], 02[spi_cs]
 00C  2D613                    OUTPUT s6[SPI_DATA], 13[SPI_PORT]       ;hold spi_cs high
 00D  2002A                    CALL 02A[ldelay]
 00E  01808                    LOAD s8[SPI_HIGH], 08
 00F  01700                    LOAD s7[SPI_LOW], 00
 010  2015C                    CALL 15C[send_spi]
 011  01813                    LOAD s8[SPI_HIGH], 13
 012  01733                    LOAD s7[SPI_LOW], 33
 013  2015C                    CALL 15C[send_spi]
 014  0182F                    LOAD s8[SPI_HIGH], 2F
 015  017FF                    LOAD s7[SPI_LOW], FF
 016  2015C                    CALL 15C[send_spi]
 017  0183F                    LOAD s8[SPI_HIGH], 3F
 018  017FF                    LOAD s7[SPI_LOW], FF
 019  2015C                    CALL 15C[send_spi]
 01A  01400                    LOAD s4[BUFPTR], 00                     ; init buffer pointer to 0
 01B  01500                    LOAD s5[LEDCOUNT], 00                   ; init leds to 0
 01C  01024                    LOAD s0, 24["$"]
 01D  20031                    CALL 031[send_to_UART]
 01E  01020                    LOAD s0, 20[" "]
 01F  20031                    CALL 031[send_to_UART]
 020  2D503         STARTLOOP: OUTPUT s5[LEDCOUNT], 03[LED_PORT]
 021  09100                    INPUT s1, 00[UART_STATUS_PORT]
 022  0D108                    TEST s1, 08[UART_RX_READY]
 023  3E020                    JUMP NC, 020[STARTLOOP]
 024  09001                    INPUT s0, 01[UART_RX_PORT]
 025  00500                    LOAD s5[LEDCOUNT], s0
 026  200AE                    CALL 0AE[store_char]                    ;store char in buffer
 027  200B1                    CALL 0B1[check_special]
 028  1D0FF                    COMPARE s0, FF
 029  22020                    JUMP 020[STARTLOOP]
 02A  01DFF            ldelay: LOAD sD[COUNTER1], FF
 02B  2202E                    JUMP 02E[DLOOP]
 02C  01D40            sdelay: LOAD sD[COUNTER1], 40
 02D  2202E                    JUMP 02E[DLOOP]
 02E  19D01             DLOOP: SUB sD[COUNTER1], 01
 02F  3602E                    JUMP NZ, 02E[DLOOP]
 030  25000                    RETURN 
 031  09100      send_to_UART: INPUT s1, 00[UART_STATUS_PORT]
 032  0D104                    TEST s1, 04[UART_TX_FULL]
 033  36031                    JUMP NZ, 031[send_to_UART]
 034  2D0F3                    OUTPUT s0, F3[UART_TX_PORT]
 035  25000                    RETURN 
 036  24BA0       send_string: CALL@ (sB[ADDRHIGH], sA[ADDRLOW])
 037  20031                    CALL 031[send_to_UART]
 038  1D00D                    COMPARE s0, 0D
 039  31000                    RETURN Z
 03A  11A01                    ADD sA[ADDRLOW], 01
 03B  13B00                    ADDCY sB[ADDRHIGH], 00
 03C  22036                    JUMP 036[send_string]
 03D                           STRING dean$, "Hello, Dean!"
 03D  21048              dean: LOAD&RETURN s0, 48[dean$:"H"]
 03E  21065                    LOAD&RETURN s0, 65[dean$:"e"]
 03F  2106C                    LOAD&RETURN s0, 6C[dean$:"l"]
 040  2106C                    LOAD&RETURN s0, 6C[dean$:"l"]
 041  2106F                    LOAD&RETURN s0, 6F[dean$:"o"]
 042  2102C                    LOAD&RETURN s0, 2C[dean$:","]
 043  21020                    LOAD&RETURN s0, 20[dean$:" "]
 044  21044                    LOAD&RETURN s0, 44[dean$:"D"]
 045  21065                    LOAD&RETURN s0, 65[dean$:"e"]
 046  21061                    LOAD&RETURN s0, 61[dean$:"a"]
 047  2106E                    LOAD&RETURN s0, 6E[dean$:"n"]
 048  21021                    LOAD&RETURN s0, 21[dean$:"!"]
 049  2100A                    LOAD&RETURN s0, 0A
 04A  2100D                    LOAD&RETURN s0, 0D
 04B                           STRING error$, "Error, invalid input."
 04B  21045             error: LOAD&RETURN s0, 45[error$:"E"]
 04C  21072                    LOAD&RETURN s0, 72[error$:"r"]
 04D  21072                    LOAD&RETURN s0, 72[error$:"r"]
 04E  2106F                    LOAD&RETURN s0, 6F[error$:"o"]
 04F  21072                    LOAD&RETURN s0, 72[error$:"r"]
 050  2102C                    LOAD&RETURN s0, 2C[error$:","]
 051  21020                    LOAD&RETURN s0, 20[error$:" "]
 052  21069                    LOAD&RETURN s0, 69[error$:"i"]
 053  2106E                    LOAD&RETURN s0, 6E[error$:"n"]
 054  21076                    LOAD&RETURN s0, 76[error$:"v"]
 055  21061                    LOAD&RETURN s0, 61[error$:"a"]
 056  2106C                    LOAD&RETURN s0, 6C[error$:"l"]
 057  21069                    LOAD&RETURN s0, 69[error$:"i"]
 058  21064                    LOAD&RETURN s0, 64[error$:"d"]
 059  21020                    LOAD&RETURN s0, 20[error$:" "]
 05A  21069                    LOAD&RETURN s0, 69[error$:"i"]
 05B  2106E                    LOAD&RETURN s0, 6E[error$:"n"]
 05C  21070                    LOAD&RETURN s0, 70[error$:"p"]
 05D  21075                    LOAD&RETURN s0, 75[error$:"u"]
 05E  21074                    LOAD&RETURN s0, 74[error$:"t"]
 05F  2102E                    LOAD&RETURN s0, 2E[error$:"."]
 060  2100A                    LOAD&RETURN s0, 0A
 061  2100D                    LOAD&RETURN s0, 0D
 062  0100A         next_line: LOAD s0, 0A
 063  2D0F3                    OUTPUT s0, F3[UART_TX_PORT]
 064  0100D                    LOAD s0, 0D
 065  2D0F3                    OUTPUT s0, F3[UART_TX_PORT]
 066  25000                    RETURN 
 067  01B00         error_msg: LOAD sB[ADDRHIGH], 00[error'upper]
 068  01A4B                    LOAD sA[ADDRLOW], 4B[error'lower]
 069  20036                    CALL 036[send_string]
 06A  01024                    LOAD s0, 24["$"]
 06B  20031                    CALL 031[send_to_UART]
 06C  01020                    LOAD s0, 20[" "]
 06D  20031                    CALL 031[send_to_UART]
 06E  25000                    RETURN 
 06F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;; hex to byte utilities from Dan
 06F  1D961        upper_case: COMPARE s9[RXREG], 61["a"]              ;eliminate character codes below 'a' (61 hex)
 070  39000                    RETURN C
 071  1D97B                    COMPARE s9[RXREG], 7B                   ;eliminate character codes above 'z' (7A hex)
 072  3D000                    RETURN NC
 073  039DF                    AND s9[RXREG], DF[11011111'b]           ;force bit5 Low to convert to upper case
 074  25000                    RETURN 
 075  119B9      ASCII_to_hex: ADD s9[RXREG], B9                       ;test for above ASCII code 46 ('F')
 076  39000                    RETURN C
 077  199E9                    SUB s9[RXREG], E9                       ;normalise 0 to 9 with A-F in 11 to 16 hex
 078  39000                    RETURN C                                ;reject below ASCII code 30 ('0')
 079  19911                    SUB s9[RXREG], 11                       ;isolate A-F down to 00 to 05 hex
 07A  3E07F                    JUMP NC, 07F[ASCII_letter]
 07B  11907                    ADD s9[RXREG], 07                       ;test for above ASCII code 46 ('F')
 07C  39000                    RETURN C
 07D  199F6                    SUB s9[RXREG], F6                       ;convert to range 00 to 09
 07E  25000                    RETURN 
 07F  1190A      ASCII_letter: ADD s9[RXREG], 0A                       ;convert to range 0A to 0F
 080  25000                    RETURN 
 081                           ;;; ============================================================================
 081                           ;;; Convert two bytes of ascii to hex
 081                           ;; return byte in s0, C=1 for sucess, C=0 for failure
 081                           ;; load two ASCII characters in s1,s2
 081                           ;; this uses s3
 081                           ;;; ============================================================================
 081  01000       HEX_TO_BYTE: LOAD s0, 00                             ; load s0 with zero
 082  00310                    LOAD s3, s1                             ; make local copies of s1
 083  19330                    SUB s3, 30                              ; Drop s3 to 0-9 if the number was ascii 0-9
 084  3A0AB                    JUMP C, 0AB[HEX_TO_BYTE_ERR]            ; if some lower character, throw an error
 085  1D30A                    COMPARE s3, 0A                          ; check for 0-9
 086  3A092                    JUMP C, 092[HEX_TO_BYTE1]               ; jump the next byte if s3 < 10
 087  19311                    SUB s3, 11                              ; Move ASCII A to zero and see if we roll over
 088  3A0AB                    JUMP C, 0AB[HEX_TO_BYTE_ERR]            ; if s3 is between ASCII ranges 0-9 and A-F
 089  1130A                    ADD s3, 0A                              ; add 10 to bring ascii A-F to dec 10-15
 08A  1D310                    COMPARE s3, 10                          ; compare to dec 16
 08B  3A092                    JUMP C, 092[HEX_TO_BYTE1]               ; if less than 16, go to next byte
 08C  1932A                    SUB s3, 2A                              ; bring ASCII a-f to dec 0-5
 08D  3A0AB                    JUMP C, 0AB[HEX_TO_BYTE_ERR]            ; bring ascii a to zero and see if we roll over
 08E  1130A                    ADD s3, 0A                              ; bring a-f to 10-15
 08F  1D310                    COMPARE s3, 10                          ; compare to dec 16
 090  3A092                    JUMP C, 092[HEX_TO_BYTE1]               ; if less than 16, go to next byte
 091  220AB                    JUMP 0AB[HEX_TO_BYTE_ERR]               ; other values are errors
 092  14306      HEX_TO_BYTE1: SL0 s3                                  ; bitshift up 4 bits
 093  14306                    SL0 s3
 094  14306                    SL0 s3
 095  14306                    SL0 s3
 096  00030                    LOAD s0, s3                             ; save in s0
 097  00320                    LOAD s3, s2
 098  19330                    SUB s3, 30                              ; Drop s3 to 0-9 if the number was ascii 0-9
 099  3A0AB                    JUMP C, 0AB[HEX_TO_BYTE_ERR]            ; if some lower character, throw an error
 09A  1D30A                    COMPARE s3, 0A                          ; check for 0-9
 09B  3A0A7                    JUMP C, 0A7[HEX_TO_BYTE2]               ; jump the next byte if s3 < 10
 09C  19311                    SUB s3, 11                              ; Move ASCII A to zero and see if we roll over
 09D  3A0AB                    JUMP C, 0AB[HEX_TO_BYTE_ERR]            ; if s3 is between ASCII ranges 0-9 and A-F
 09E  1130A                    ADD s3, 0A                              ; add 10 to bring ascii A-F to dec 10-15
 09F  1D310                    COMPARE s3, 10                          ; compare to dec 16
 0A0  3A0A7                    JUMP C, 0A7[HEX_TO_BYTE2]               ; if less than 16, go to next byte
 0A1  1932A                    SUB s3, 2A                              ; bring ASCII a-f to dec 0-5
 0A2  3A0AB                    JUMP C, 0AB[HEX_TO_BYTE_ERR]            ; bring ascii a to zero and see if we roll over
 0A3  1130A                    ADD s3, 0A                              ; bring a-f to 10-15
 0A4  1D310                    COMPARE s3, 10                          ; compare to dec 16
 0A5  3A0A7                    JUMP C, 0A7[HEX_TO_BYTE2]               ; if less than 16, go to next byte
 0A6  220AB                    JUMP 0AB[HEX_TO_BYTE_ERR]               ; other values are errors
 0A7  10030      HEX_TO_BYTE2: ADD s0, s3
 0A8  01301                    LOAD s3, 01
 0A9  1430E                    SR0 s3                                  ; load 1 into C for sucess
 0AA  25000                    RETURN                                  ;this... will fail if not actually ASCII HEX... need to fix that
 0AB          HEX_TO_BYTE_ERR: 
 0AB  01300                    LOAD s3, 00
 0AC  1430E                    SR0 s3                                  ; LOAD 0 into C for failure
 0AD  25000                    RETURN 
 0AE                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;; to store characters
 0AE  2E040        store_char: STORE s0, (s4[BUFPTR])
 0AF  11401                    ADD s4[BUFPTR], 01
 0B0  25000                    RETURN 
 0B1                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;; check for special input
 0B1  00140     check_special: LOAD s1, s4[BUFPTR]
 0B2  19101                    SUB s1, 01
 0B3  0A010                    FETCH s0, (s1)                          ; load last char into s0
 0B4  1D00D                    COMPARE s0, 0D                          ; CR
 0B5  320BB                    JUMP Z, 0BB[parse_buffer]
 0B6  1D008                    COMPARE s0, 08                          ; backspace
 0B7  320D4                    JUMP Z, 0D4[parse_backspace]
 0B8  39000                    RETURN C
 0B9  20031                    CALL 031[send_to_UART]                  ; echo
 0BA  25000                    RETURN 
 0BB             parse_buffer: 
 0BB  20062                    CALL 062[next_line]
 0BC  01400                    LOAD s4[BUFPTR], 00
 0BD  0A140                    FETCH s1, (s4[BUFPTR])
 0BE  1D164                    COMPARE s1, 64["d"]
 0BF  320E2                    JUMP Z, 0E2[set_dac]
 0C0  1D163                    COMPARE s1, 63["c"]
 0C1  320F1                    JUMP Z, 0F1[set_channel]
 0C2  1D173                    COMPARE s1, 73["s"]
 0C3  32117                    JUMP Z, 117[fire_once]
 0C4  1D16E                    COMPARE s1, 6E["n"]
 0C5  3211C                    JUMP Z, 11C[rapid_on]
 0C6  1D16D                    COMPARE s1, 6D["m"]
 0C7  3211F                    JUMP Z, 11F[rapid_off]
 0C8  1D168                    COMPARE s1, 68["h"]
 0C9  32154                    JUMP Z, 154[help_msg]
 0CA  1D161                    COMPARE s1, 61["a"]
 0CB  32122                    JUMP Z, 122[cont_start]
 0CC  1D17A                    COMPARE s1, 7A["z"]
 0CD  32125                    JUMP Z, 125[cont_stop]
 0CE  1D170                    COMPARE s1, 70["p"]
 0CF  32128                    JUMP Z, 128[period]
 0D0  1D174                    COMPARE s1, 74["t"]
 0D1  3213E                    JUMP Z, 13E[pulse_period]
 0D2  20067                    CALL 067[error_msg]
 0D3  25000                    RETURN 
 0D4          parse_backspace: 
 0D4  00140                    LOAD s1, s4[BUFPTR]                     ; check if there is anything to bs into
 0D5  19102                    SUB s1, 02                              ; because we've already moved 1 ahead in MEM_WR_PTR
 0D6  3A0DD                    JUMP C, 0DD[parse_UI_bs_done]
 0D7  20031                    CALL 031[send_to_UART]                  ; backspace
 0D8  01020                    LOAD s0, 20[" "]
 0D9  20031                    CALL 031[send_to_UART]                  ; blank
 0DA  01008                    LOAD s0, 08
 0DB  20031                    CALL 031[send_to_UART]                  ; backspace
 0DC  19401                    SUB s4[BUFPTR], 01                      ; this along with the next line removes the last char from memory
 0DD         parse_UI_bs_done: 
 0DD  19401                    SUB s4[BUFPTR], 01                      ; remove the bs char from memory
 0DE  01000                    LOAD s0, 00
 0DF  1400C                    RR s0                                   ; set C to zero because there is no new command
 0E0  25000                    RETURN 
 0E1  25000                    RETURN 
 0E2                  set_dac: 
 0E2  0B101                    FETCH s1, 01
 0E3  1D120                    COMPARE s1, 20[" "]
 0E4  36067                    JUMP NZ, 067[error_msg]
 0E5  0B102                    FETCH s1, 02
 0E6  0B203                    FETCH s2, 03
 0E7  20081                    CALL 081[HEX_TO_BYTE]
 0E8  3E067                    JUMP NC, 067[error_msg]
 0E9  00800                    LOAD s8[SPI_HIGH], s0
 0EA  0B104                    FETCH s1, 04
 0EB  0B205                    FETCH s2, 05
 0EC  20081                    CALL 081[HEX_TO_BYTE]
 0ED  3E067                    JUMP NC, 067[error_msg]
 0EE  00700                    LOAD s7[SPI_LOW], s0
 0EF  2015C                    CALL 15C[send_spi]
 0F0  22156                    JUMP 156[cmd_end]
 0F1              set_channel: 
 0F1                           ;; sE is current port
 0F1                           ;; sF is address XXAA AAXX
 0F1  0B101                    FETCH s1, 01
 0F2  1D120                    COMPARE s1, 20[" "]
 0F3  36067                    JUMP NZ, 067[error_msg]
 0F4  01130                    LOAD s1, 30
 0F5  0B202                    FETCH s2, 02
 0F6  20081                    CALL 081[HEX_TO_BYTE]
 0F7  3E067                    JUMP NC, 067[error_msg]
 0F8  14006                    SL0 s0                                  ; shift address into place
 0F9  14006                    SL0 s0
 0FA  00F00                    LOAD sF, s0                             ; store address
 0FB  01E00                    LOAD sE, 00
 0FC  04EF0                    OR sE, sF
 0FD  05E82                    OR sE, 82                               ; MSB data byte is 10
 0FE  0B103                    FETCH s1, 03
 0FF  1D120                    COMPARE s1, 20[" "]
 100  36067                    JUMP NZ, 067[error_msg]
 101  01130                    LOAD s1, 30                             ; don't care about rest!
 102  0B204                    FETCH s2, 04                            ; only need first bit
 103  20081                    CALL 081[HEX_TO_BYTE]
 104  3E067                    JUMP NC, 067[error_msg]
 105  2C0E0                    OUTPUT s0, (sE)                         ; output MSB of start_time
 106  01E00                    LOAD sE, 00
 107  04EF0                    OR sE, sF
 108  05E81                    OR sE, 81                               ; now make current data byte 01
 109  0B105                    FETCH s1, 05
 10A  0B206                    FETCH s2, 06
 10B  20081                    CALL 081[HEX_TO_BYTE]
 10C  3E067                    JUMP NC, 067[error_msg]
 10D  2C0E0                    OUTPUT s0, (sE)                         ; output the middle data byte
 10E  01E00                    LOAD sE, 00
 10F  04EF0                    OR sE, sF
 110  05E80                    OR sE, 80                               ; now make current data byte 00
 111  0B107                    FETCH s1, 07
 112  0B208                    FETCH s2, 08
 113  20081                    CALL 081[HEX_TO_BYTE]
 114  3E067                    JUMP NC, 067[error_msg]
 115  2C0E0                    OUTPUT s0, (sE)                         ; output the least significant data byte
 116  22156                    JUMP 156[cmd_end]
 117                fire_once: 
 117  010FF                    LOAD s0, FF
 118  2D023                    OUTPUT s0, 23[ONCEPORT]
 119  01000                    LOAD s0, 00
 11A  2D023                    OUTPUT s0, 23[ONCEPORT]
 11B  22156                    JUMP 156[cmd_end]
 11C                 rapid_on: 
 11C  010FF                    LOAD s0, FF
 11D  2D023                    OUTPUT s0, 23[ONCEPORT]
 11E  22156                    JUMP 156[cmd_end]
 11F                rapid_off: 
 11F  01000                    LOAD s0, 00
 120  2D023                    OUTPUT s0, 23[ONCEPORT]
 121  22156                    JUMP 156[cmd_end]
 122               cont_start: 
 122  010FF                    LOAD s0, FF
 123  2D033                    OUTPUT s0, 33[INITPORT]
 124  22156                    JUMP 156[cmd_end]
 125                cont_stop: 
 125  01000                    LOAD s0, 00
 126  2D033                    OUTPUT s0, 33[INITPORT]
 127  22156                    JUMP 156[cmd_end]
 128                   period: 
 128  0B101                    FETCH s1, 01
 129  1D120                    COMPARE s1, 20[" "]
 12A  36067                    JUMP NZ, 067[error_msg]
 12B  01E40                    LOAD sE, 40
 12C  01130                    LOAD s1, 30                             ; don't care about rest!
 12D  0B202                    FETCH s2, 02                            ; only need first bit
 12E  20081                    CALL 081[HEX_TO_BYTE]
 12F  3E067                    JUMP NC, 067[error_msg]
 130  2C0E0                    OUTPUT s0, (sE)                         ; output MSB of period
 131  11E01                    ADD sE, 01
 132  0B103                    FETCH s1, 03
 133  0B204                    FETCH s2, 04
 134  20081                    CALL 081[HEX_TO_BYTE]
 135  3E067                    JUMP NC, 067[error_msg]
 136  2C0E0                    OUTPUT s0, (sE)                         ; output the middle data byte
 137  11E01                    ADD sE, 01
 138  0B105                    FETCH s1, 05
 139  0B206                    FETCH s2, 06
 13A  20081                    CALL 081[HEX_TO_BYTE]
 13B  3E067                    JUMP NC, 067[error_msg]
 13C  2C0E0                    OUTPUT s0, (sE)                         ; output the least significant data byte
 13D  22156                    JUMP 156[cmd_end]
 13E             pulse_period: 
 13E  0B101                    FETCH s1, 01
 13F  1D120                    COMPARE s1, 20[" "]
 140  36067                    JUMP NZ, 067[error_msg]
 141  01E44                    LOAD sE, 44
 142  01130                    LOAD s1, 30                             ; don't care about rest!
 143  0B202                    FETCH s2, 02                            ; only need first bit
 144  20081                    CALL 081[HEX_TO_BYTE]
 145  3E067                    JUMP NC, 067[error_msg]
 146  2C0E0                    OUTPUT s0, (sE)                         ; output MSB of period
 147  11E01                    ADD sE, 01
 148  0B103                    FETCH s1, 03
 149  0B204                    FETCH s2, 04
 14A  20081                    CALL 081[HEX_TO_BYTE]
 14B  3E067                    JUMP NC, 067[error_msg]
 14C  2C0E0                    OUTPUT s0, (sE)                         ; output the middle data byte
 14D  11E01                    ADD sE, 01
 14E  0B105                    FETCH s1, 05
 14F  0B206                    FETCH s2, 06
 150  20081                    CALL 081[HEX_TO_BYTE]
 151  3E067                    JUMP NC, 067[error_msg]
 152  2C0E0                    OUTPUT s0, (sE)                         ; output the least significant data byte
 153  22156                    JUMP 156[cmd_end]
 154                 help_msg: 
 154  20172                    CALL 172[display_help]
 155  22156                    JUMP 156[cmd_end]
 156  01024           cmd_end: LOAD s0, 24["$"]
 157  20031                    CALL 031[send_to_UART]
 158  01020                    LOAD s0, 20[" "]
 159  20031                    CALL 031[send_to_UART]
 15A  01400                    LOAD s4[BUFPTR], 00
 15B  25000                    RETURN 
 15C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;; SPI
 15C  01C10          send_spi: LOAD sC[SPI_BIT_COUNT], 10
 15D  00680          next_bit: LOAD s6[SPI_DATA], s8[SPI_HIGH]
 15E  03680                    AND s6[SPI_DATA], 80[spi_mosi]
 15F  2D613                    OUTPUT s6[SPI_DATA], 13[SPI_PORT]
 160  14706                    SL0 s7[SPI_LOW]
 161  14800                    SLA s8[SPI_HIGH]
 162  2016A                    CALL 16A[clock_pulse]
 163  19C01                    SUB sC[SPI_BIT_COUNT], 01
 164  3615D                    JUMP NZ, 15D[next_bit]
 165  01602                    LOAD s6[SPI_DATA], 02[spi_cs]
 166  05601                    OR s6[SPI_DATA], 01[spi_clk]
 167  2D613                    OUTPUT s6[SPI_DATA], 13[SPI_PORT]
 168  2002C                    CALL 02C[sdelay]
 169  25000                    RETURN 
 16A  05601       clock_pulse: OR s6[SPI_DATA], 01[spi_clk]
 16B  2002C                    CALL 02C[sdelay]
 16C  2D613                    OUTPUT s6[SPI_DATA], 13[SPI_PORT]
 16D  036FE                    AND s6[SPI_DATA], FE[~spi_clk]
 16E  2002C                    CALL 02C[sdelay]
 16F  2D613                    OUTPUT s6[SPI_DATA], 13[SPI_PORT]
 170  2002C                    CALL 02C[sdelay]
 171  25000                    RETURN 
 172             display_help: 
 172  01B01                    LOAD sB[ADDRHIGH], 01[help1'upper]
 173  01A8D                    LOAD sA[ADDRLOW], 8D[help1'lower]
 174  20036                    CALL 036[send_string]
 175  20062                    CALL 062[next_line]
 176  01B01                    LOAD sB[ADDRHIGH], 01[help2'upper]
 177  01AB9                    LOAD sA[ADDRLOW], B9[help2'lower]
 178  20036                    CALL 036[send_string]
 179  01B01                    LOAD sB[ADDRHIGH], 01[help3'upper]
 17A  01AE3                    LOAD sA[ADDRLOW], E3[help3'lower]
 17B  20036                    CALL 036[send_string]
 17C  01B02                    LOAD sB[ADDRHIGH], 02[help4'upper]
 17D  01A1F                    LOAD sA[ADDRLOW], 1F[help4'lower]
 17E  20036                    CALL 036[send_string]
 17F  01B02                    LOAD sB[ADDRHIGH], 02[help5'upper]
 180  01A40                    LOAD sA[ADDRLOW], 40[help5'lower]
 181  20036                    CALL 036[send_string]
 182  01B02                    LOAD sB[ADDRHIGH], 02[help6'upper]
 183  01A61                    LOAD sA[ADDRLOW], 61[help6'lower]
 184  20036                    CALL 036[send_string]
 185  01B02                    LOAD sB[ADDRHIGH], 02[help7'upper]
 186  01A81                    LOAD sA[ADDRLOW], 81[help7'lower]
 187  20036                    CALL 036[send_string]
 188  01B02                    LOAD sB[ADDRHIGH], 02[help8'upper]
 189  01AB9                    LOAD sA[ADDRLOW], B9[help8'lower]
 18A  20036                    CALL 036[send_string]
 18B  20062                    CALL 062[next_line]
 18C  25000                    RETURN 
 18D                           STRING help1$, "              G-2 Flight Tracker Simulator"
 18D  21020             help1: LOAD&RETURN s0, 20[help1$:" "]
 18E  21020                    LOAD&RETURN s0, 20[help1$:" "]
 18F  21020                    LOAD&RETURN s0, 20[help1$:" "]
 190  21020                    LOAD&RETURN s0, 20[help1$:" "]
 191  21020                    LOAD&RETURN s0, 20[help1$:" "]
 192  21020                    LOAD&RETURN s0, 20[help1$:" "]
 193  21020                    LOAD&RETURN s0, 20[help1$:" "]
 194  21020                    LOAD&RETURN s0, 20[help1$:" "]
 195  21020                    LOAD&RETURN s0, 20[help1$:" "]
 196  21020                    LOAD&RETURN s0, 20[help1$:" "]
 197  21020                    LOAD&RETURN s0, 20[help1$:" "]
 198  21020                    LOAD&RETURN s0, 20[help1$:" "]
 199  21020                    LOAD&RETURN s0, 20[help1$:" "]
 19A  21020                    LOAD&RETURN s0, 20[help1$:" "]
 19B  21047                    LOAD&RETURN s0, 47[help1$:"G"]
 19C  2102D                    LOAD&RETURN s0, 2D[help1$:"-"]
 19D  21032                    LOAD&RETURN s0, 32[help1$:"2"]
 19E  21020                    LOAD&RETURN s0, 20[help1$:" "]
 19F  21046                    LOAD&RETURN s0, 46[help1$:"F"]
 1A0  2106C                    LOAD&RETURN s0, 6C[help1$:"l"]
 1A1  21069                    LOAD&RETURN s0, 69[help1$:"i"]
 1A2  21067                    LOAD&RETURN s0, 67[help1$:"g"]
 1A3  21068                    LOAD&RETURN s0, 68[help1$:"h"]
 1A4  21074                    LOAD&RETURN s0, 74[help1$:"t"]
 1A5  21020                    LOAD&RETURN s0, 20[help1$:" "]
 1A6  21054                    LOAD&RETURN s0, 54[help1$:"T"]
 1A7  21072                    LOAD&RETURN s0, 72[help1$:"r"]
 1A8  21061                    LOAD&RETURN s0, 61[help1$:"a"]
 1A9  21063                    LOAD&RETURN s0, 63[help1$:"c"]
 1AA  2106B                    LOAD&RETURN s0, 6B[help1$:"k"]
 1AB  21065                    LOAD&RETURN s0, 65[help1$:"e"]
 1AC  21072                    LOAD&RETURN s0, 72[help1$:"r"]
 1AD  21020                    LOAD&RETURN s0, 20[help1$:" "]
 1AE  21053                    LOAD&RETURN s0, 53[help1$:"S"]
 1AF  21069                    LOAD&RETURN s0, 69[help1$:"i"]
 1B0  2106D                    LOAD&RETURN s0, 6D[help1$:"m"]
 1B1  21075                    LOAD&RETURN s0, 75[help1$:"u"]
 1B2  2106C                    LOAD&RETURN s0, 6C[help1$:"l"]
 1B3  21061                    LOAD&RETURN s0, 61[help1$:"a"]
 1B4  21074                    LOAD&RETURN s0, 74[help1$:"t"]
 1B5  2106F                    LOAD&RETURN s0, 6F[help1$:"o"]
 1B6  21072                    LOAD&RETURN s0, 72[help1$:"r"]
 1B7  2100A                    LOAD&RETURN s0, 0A
 1B8  2100D                    LOAD&RETURN s0, 0D
 1B9                           STRING help2$, "d NXXX         set dac N to XXX/FFF*2.5V"
 1B9  21064             help2: LOAD&RETURN s0, 64[help2$:"d"]
 1BA  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1BB  2104E                    LOAD&RETURN s0, 4E[help2$:"N"]
 1BC  21058                    LOAD&RETURN s0, 58[help2$:"X"]
 1BD  21058                    LOAD&RETURN s0, 58[help2$:"X"]
 1BE  21058                    LOAD&RETURN s0, 58[help2$:"X"]
 1BF  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1C0  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1C1  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1C2  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1C3  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1C4  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1C5  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1C6  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1C7  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1C8  21073                    LOAD&RETURN s0, 73[help2$:"s"]
 1C9  21065                    LOAD&RETURN s0, 65[help2$:"e"]
 1CA  21074                    LOAD&RETURN s0, 74[help2$:"t"]
 1CB  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1CC  21064                    LOAD&RETURN s0, 64[help2$:"d"]
 1CD  21061                    LOAD&RETURN s0, 61[help2$:"a"]
 1CE  21063                    LOAD&RETURN s0, 63[help2$:"c"]
 1CF  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1D0  2104E                    LOAD&RETURN s0, 4E[help2$:"N"]
 1D1  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1D2  21074                    LOAD&RETURN s0, 74[help2$:"t"]
 1D3  2106F                    LOAD&RETURN s0, 6F[help2$:"o"]
 1D4  21020                    LOAD&RETURN s0, 20[help2$:" "]
 1D5  21058                    LOAD&RETURN s0, 58[help2$:"X"]
 1D6  21058                    LOAD&RETURN s0, 58[help2$:"X"]
 1D7  21058                    LOAD&RETURN s0, 58[help2$:"X"]
 1D8  2102F                    LOAD&RETURN s0, 2F[help2$:"/"]
 1D9  21046                    LOAD&RETURN s0, 46[help2$:"F"]
 1DA  21046                    LOAD&RETURN s0, 46[help2$:"F"]
 1DB  21046                    LOAD&RETURN s0, 46[help2$:"F"]
 1DC  2102A                    LOAD&RETURN s0, 2A[help2$:"*"]
 1DD  21032                    LOAD&RETURN s0, 32[help2$:"2"]
 1DE  2102E                    LOAD&RETURN s0, 2E[help2$:"."]
 1DF  21035                    LOAD&RETURN s0, 35[help2$:"5"]
 1E0  21056                    LOAD&RETURN s0, 56[help2$:"V"]
 1E1  2100A                    LOAD&RETURN s0, 0A
 1E2  2100D                    LOAD&RETURN s0, 0D
 1E3                           STRING help3$, "c N XXXXX      set channel N start time to XXXXX (17 bits)"
 1E3  21063             help3: LOAD&RETURN s0, 63[help3$:"c"]
 1E4  21020                    LOAD&RETURN s0, 20[help3$:" "]
 1E5  2104E                    LOAD&RETURN s0, 4E[help3$:"N"]
 1E6  21020                    LOAD&RETURN s0, 20[help3$:" "]
 1E7  21058                    LOAD&RETURN s0, 58[help3$:"X"]
 1E8  21058                    LOAD&RETURN s0, 58[help3$:"X"]
 1E9  21058                    LOAD&RETURN s0, 58[help3$:"X"]
 1EA  21058                    LOAD&RETURN s0, 58[help3$:"X"]
 1EB  21058                    LOAD&RETURN s0, 58[help3$:"X"]
 1EC  21020                    LOAD&RETURN s0, 20[help3$:" "]
 1ED  21020                    LOAD&RETURN s0, 20[help3$:" "]
 1EE  21020                    LOAD&RETURN s0, 20[help3$:" "]
 1EF  21020                    LOAD&RETURN s0, 20[help3$:" "]
 1F0  21020                    LOAD&RETURN s0, 20[help3$:" "]
 1F1  21020                    LOAD&RETURN s0, 20[help3$:" "]
 1F2  21073                    LOAD&RETURN s0, 73[help3$:"s"]
 1F3  21065                    LOAD&RETURN s0, 65[help3$:"e"]
 1F4  21074                    LOAD&RETURN s0, 74[help3$:"t"]
 1F5  21020                    LOAD&RETURN s0, 20[help3$:" "]
 1F6  21063                    LOAD&RETURN s0, 63[help3$:"c"]
 1F7  21068                    LOAD&RETURN s0, 68[help3$:"h"]
 1F8  21061                    LOAD&RETURN s0, 61[help3$:"a"]
 1F9  2106E                    LOAD&RETURN s0, 6E[help3$:"n"]
 1FA  2106E                    LOAD&RETURN s0, 6E[help3$:"n"]
 1FB  21065                    LOAD&RETURN s0, 65[help3$:"e"]
 1FC  2106C                    LOAD&RETURN s0, 6C[help3$:"l"]
 1FD  21020                    LOAD&RETURN s0, 20[help3$:" "]
 1FE  2104E                    LOAD&RETURN s0, 4E[help3$:"N"]
 1FF  21020                    LOAD&RETURN s0, 20[help3$:" "]
 200  21073                    LOAD&RETURN s0, 73[help3$:"s"]
 201  21074                    LOAD&RETURN s0, 74[help3$:"t"]
 202  21061                    LOAD&RETURN s0, 61[help3$:"a"]
 203  21072                    LOAD&RETURN s0, 72[help3$:"r"]
 204  21074                    LOAD&RETURN s0, 74[help3$:"t"]
 205  21020                    LOAD&RETURN s0, 20[help3$:" "]
 206  21074                    LOAD&RETURN s0, 74[help3$:"t"]
 207  21069                    LOAD&RETURN s0, 69[help3$:"i"]
 208  2106D                    LOAD&RETURN s0, 6D[help3$:"m"]
 209  21065                    LOAD&RETURN s0, 65[help3$:"e"]
 20A  21020                    LOAD&RETURN s0, 20[help3$:" "]
 20B  21074                    LOAD&RETURN s0, 74[help3$:"t"]
 20C  2106F                    LOAD&RETURN s0, 6F[help3$:"o"]
 20D  21020                    LOAD&RETURN s0, 20[help3$:" "]
 20E  21058                    LOAD&RETURN s0, 58[help3$:"X"]
 20F  21058                    LOAD&RETURN s0, 58[help3$:"X"]
 210  21058                    LOAD&RETURN s0, 58[help3$:"X"]
 211  21058                    LOAD&RETURN s0, 58[help3$:"X"]
 212  21058                    LOAD&RETURN s0, 58[help3$:"X"]
 213  21020                    LOAD&RETURN s0, 20[help3$:" "]
 214  21028                    LOAD&RETURN s0, 28[help3$:"("]
 215  21031                    LOAD&RETURN s0, 31[help3$:"1"]
 216  21037                    LOAD&RETURN s0, 37[help3$:"7"]
 217  21020                    LOAD&RETURN s0, 20[help3$:" "]
 218  21062                    LOAD&RETURN s0, 62[help3$:"b"]
 219  21069                    LOAD&RETURN s0, 69[help3$:"i"]
 21A  21074                    LOAD&RETURN s0, 74[help3$:"t"]
 21B  21073                    LOAD&RETURN s0, 73[help3$:"s"]
 21C  21029                    LOAD&RETURN s0, 29[help3$:")"]
 21D  2100A                    LOAD&RETURN s0, 0A
 21E  2100D                    LOAD&RETURN s0, 0D
 21F                           STRING help4$, "s              fire pulses once"
 21F  21073             help4: LOAD&RETURN s0, 73[help4$:"s"]
 220  21020                    LOAD&RETURN s0, 20[help4$:" "]
 221  21020                    LOAD&RETURN s0, 20[help4$:" "]
 222  21020                    LOAD&RETURN s0, 20[help4$:" "]
 223  21020                    LOAD&RETURN s0, 20[help4$:" "]
 224  21020                    LOAD&RETURN s0, 20[help4$:" "]
 225  21020                    LOAD&RETURN s0, 20[help4$:" "]
 226  21020                    LOAD&RETURN s0, 20[help4$:" "]
 227  21020                    LOAD&RETURN s0, 20[help4$:" "]
 228  21020                    LOAD&RETURN s0, 20[help4$:" "]
 229  21020                    LOAD&RETURN s0, 20[help4$:" "]
 22A  21020                    LOAD&RETURN s0, 20[help4$:" "]
 22B  21020                    LOAD&RETURN s0, 20[help4$:" "]
 22C  21020                    LOAD&RETURN s0, 20[help4$:" "]
 22D  21020                    LOAD&RETURN s0, 20[help4$:" "]
 22E  21066                    LOAD&RETURN s0, 66[help4$:"f"]
 22F  21069                    LOAD&RETURN s0, 69[help4$:"i"]
 230  21072                    LOAD&RETURN s0, 72[help4$:"r"]
 231  21065                    LOAD&RETURN s0, 65[help4$:"e"]
 232  21020                    LOAD&RETURN s0, 20[help4$:" "]
 233  21070                    LOAD&RETURN s0, 70[help4$:"p"]
 234  21075                    LOAD&RETURN s0, 75[help4$:"u"]
 235  2106C                    LOAD&RETURN s0, 6C[help4$:"l"]
 236  21073                    LOAD&RETURN s0, 73[help4$:"s"]
 237  21065                    LOAD&RETURN s0, 65[help4$:"e"]
 238  21073                    LOAD&RETURN s0, 73[help4$:"s"]
 239  21020                    LOAD&RETURN s0, 20[help4$:" "]
 23A  2106F                    LOAD&RETURN s0, 6F[help4$:"o"]
 23B  2106E                    LOAD&RETURN s0, 6E[help4$:"n"]
 23C  21063                    LOAD&RETURN s0, 63[help4$:"c"]
 23D  21065                    LOAD&RETURN s0, 65[help4$:"e"]
 23E  2100A                    LOAD&RETURN s0, 0A
 23F  2100D                    LOAD&RETURN s0, 0D
 240                           STRING help5$, "a              start continuous"
 240  21061             help5: LOAD&RETURN s0, 61[help5$:"a"]
 241  21020                    LOAD&RETURN s0, 20[help5$:" "]
 242  21020                    LOAD&RETURN s0, 20[help5$:" "]
 243  21020                    LOAD&RETURN s0, 20[help5$:" "]
 244  21020                    LOAD&RETURN s0, 20[help5$:" "]
 245  21020                    LOAD&RETURN s0, 20[help5$:" "]
 246  21020                    LOAD&RETURN s0, 20[help5$:" "]
 247  21020                    LOAD&RETURN s0, 20[help5$:" "]
 248  21020                    LOAD&RETURN s0, 20[help5$:" "]
 249  21020                    LOAD&RETURN s0, 20[help5$:" "]
 24A  21020                    LOAD&RETURN s0, 20[help5$:" "]
 24B  21020                    LOAD&RETURN s0, 20[help5$:" "]
 24C  21020                    LOAD&RETURN s0, 20[help5$:" "]
 24D  21020                    LOAD&RETURN s0, 20[help5$:" "]
 24E  21020                    LOAD&RETURN s0, 20[help5$:" "]
 24F  21073                    LOAD&RETURN s0, 73[help5$:"s"]
 250  21074                    LOAD&RETURN s0, 74[help5$:"t"]
 251  21061                    LOAD&RETURN s0, 61[help5$:"a"]
 252  21072                    LOAD&RETURN s0, 72[help5$:"r"]
 253  21074                    LOAD&RETURN s0, 74[help5$:"t"]
 254  21020                    LOAD&RETURN s0, 20[help5$:" "]
 255  21063                    LOAD&RETURN s0, 63[help5$:"c"]
 256  2106F                    LOAD&RETURN s0, 6F[help5$:"o"]
 257  2106E                    LOAD&RETURN s0, 6E[help5$:"n"]
 258  21074                    LOAD&RETURN s0, 74[help5$:"t"]
 259  21069                    LOAD&RETURN s0, 69[help5$:"i"]
 25A  2106E                    LOAD&RETURN s0, 6E[help5$:"n"]
 25B  21075                    LOAD&RETURN s0, 75[help5$:"u"]
 25C  2106F                    LOAD&RETURN s0, 6F[help5$:"o"]
 25D  21075                    LOAD&RETURN s0, 75[help5$:"u"]
 25E  21073                    LOAD&RETURN s0, 73[help5$:"s"]
 25F  2100A                    LOAD&RETURN s0, 0A
 260  2100D                    LOAD&RETURN s0, 0D
 261                           STRING help6$, "z              stop continuous"
 261  2107A             help6: LOAD&RETURN s0, 7A[help6$:"z"]
 262  21020                    LOAD&RETURN s0, 20[help6$:" "]
 263  21020                    LOAD&RETURN s0, 20[help6$:" "]
 264  21020                    LOAD&RETURN s0, 20[help6$:" "]
 265  21020                    LOAD&RETURN s0, 20[help6$:" "]
 266  21020                    LOAD&RETURN s0, 20[help6$:" "]
 267  21020                    LOAD&RETURN s0, 20[help6$:" "]
 268  21020                    LOAD&RETURN s0, 20[help6$:" "]
 269  21020                    LOAD&RETURN s0, 20[help6$:" "]
 26A  21020                    LOAD&RETURN s0, 20[help6$:" "]
 26B  21020                    LOAD&RETURN s0, 20[help6$:" "]
 26C  21020                    LOAD&RETURN s0, 20[help6$:" "]
 26D  21020                    LOAD&RETURN s0, 20[help6$:" "]
 26E  21020                    LOAD&RETURN s0, 20[help6$:" "]
 26F  21020                    LOAD&RETURN s0, 20[help6$:" "]
 270  21073                    LOAD&RETURN s0, 73[help6$:"s"]
 271  21074                    LOAD&RETURN s0, 74[help6$:"t"]
 272  2106F                    LOAD&RETURN s0, 6F[help6$:"o"]
 273  21070                    LOAD&RETURN s0, 70[help6$:"p"]
 274  21020                    LOAD&RETURN s0, 20[help6$:" "]
 275  21063                    LOAD&RETURN s0, 63[help6$:"c"]
 276  2106F                    LOAD&RETURN s0, 6F[help6$:"o"]
 277  2106E                    LOAD&RETURN s0, 6E[help6$:"n"]
 278  21074                    LOAD&RETURN s0, 74[help6$:"t"]
 279  21069                    LOAD&RETURN s0, 69[help6$:"i"]
 27A  2106E                    LOAD&RETURN s0, 6E[help6$:"n"]
 27B  21075                    LOAD&RETURN s0, 75[help6$:"u"]
 27C  2106F                    LOAD&RETURN s0, 6F[help6$:"o"]
 27D  21075                    LOAD&RETURN s0, 75[help6$:"u"]
 27E  21073                    LOAD&RETURN s0, 73[help6$:"s"]
 27F  2100A                    LOAD&RETURN s0, 0A
 280  2100D                    LOAD&RETURN s0, 0D
 281                           STRING help7$, "p XXXXX        set period to XXXXX (17 bits) (8ns res)"
 281  21070             help7: LOAD&RETURN s0, 70[help7$:"p"]
 282  21020                    LOAD&RETURN s0, 20[help7$:" "]
 283  21058                    LOAD&RETURN s0, 58[help7$:"X"]
 284  21058                    LOAD&RETURN s0, 58[help7$:"X"]
 285  21058                    LOAD&RETURN s0, 58[help7$:"X"]
 286  21058                    LOAD&RETURN s0, 58[help7$:"X"]
 287  21058                    LOAD&RETURN s0, 58[help7$:"X"]
 288  21020                    LOAD&RETURN s0, 20[help7$:" "]
 289  21020                    LOAD&RETURN s0, 20[help7$:" "]
 28A  21020                    LOAD&RETURN s0, 20[help7$:" "]
 28B  21020                    LOAD&RETURN s0, 20[help7$:" "]
 28C  21020                    LOAD&RETURN s0, 20[help7$:" "]
 28D  21020                    LOAD&RETURN s0, 20[help7$:" "]
 28E  21020                    LOAD&RETURN s0, 20[help7$:" "]
 28F  21020                    LOAD&RETURN s0, 20[help7$:" "]
 290  21073                    LOAD&RETURN s0, 73[help7$:"s"]
 291  21065                    LOAD&RETURN s0, 65[help7$:"e"]
 292  21074                    LOAD&RETURN s0, 74[help7$:"t"]
 293  21020                    LOAD&RETURN s0, 20[help7$:" "]
 294  21070                    LOAD&RETURN s0, 70[help7$:"p"]
 295  21065                    LOAD&RETURN s0, 65[help7$:"e"]
 296  21072                    LOAD&RETURN s0, 72[help7$:"r"]
 297  21069                    LOAD&RETURN s0, 69[help7$:"i"]
 298  2106F                    LOAD&RETURN s0, 6F[help7$:"o"]
 299  21064                    LOAD&RETURN s0, 64[help7$:"d"]
 29A  21020                    LOAD&RETURN s0, 20[help7$:" "]
 29B  21074                    LOAD&RETURN s0, 74[help7$:"t"]
 29C  2106F                    LOAD&RETURN s0, 6F[help7$:"o"]
 29D  21020                    LOAD&RETURN s0, 20[help7$:" "]
 29E  21058                    LOAD&RETURN s0, 58[help7$:"X"]
 29F  21058                    LOAD&RETURN s0, 58[help7$:"X"]
 2A0  21058                    LOAD&RETURN s0, 58[help7$:"X"]
 2A1  21058                    LOAD&RETURN s0, 58[help7$:"X"]
 2A2  21058                    LOAD&RETURN s0, 58[help7$:"X"]
 2A3  21020                    LOAD&RETURN s0, 20[help7$:" "]
 2A4  21028                    LOAD&RETURN s0, 28[help7$:"("]
 2A5  21031                    LOAD&RETURN s0, 31[help7$:"1"]
 2A6  21037                    LOAD&RETURN s0, 37[help7$:"7"]
 2A7  21020                    LOAD&RETURN s0, 20[help7$:" "]
 2A8  21062                    LOAD&RETURN s0, 62[help7$:"b"]
 2A9  21069                    LOAD&RETURN s0, 69[help7$:"i"]
 2AA  21074                    LOAD&RETURN s0, 74[help7$:"t"]
 2AB  21073                    LOAD&RETURN s0, 73[help7$:"s"]
 2AC  21029                    LOAD&RETURN s0, 29[help7$:")"]
 2AD  21020                    LOAD&RETURN s0, 20[help7$:" "]
 2AE  21028                    LOAD&RETURN s0, 28[help7$:"("]
 2AF  21038                    LOAD&RETURN s0, 38[help7$:"8"]
 2B0  2106E                    LOAD&RETURN s0, 6E[help7$:"n"]
 2B1  21073                    LOAD&RETURN s0, 73[help7$:"s"]
 2B2  21020                    LOAD&RETURN s0, 20[help7$:" "]
 2B3  21072                    LOAD&RETURN s0, 72[help7$:"r"]
 2B4  21065                    LOAD&RETURN s0, 65[help7$:"e"]
 2B5  21073                    LOAD&RETURN s0, 73[help7$:"s"]
 2B6  21029                    LOAD&RETURN s0, 29[help7$:")"]
 2B7  2100A                    LOAD&RETURN s0, 0A
 2B8  2100D                    LOAD&RETURN s0, 0D
 2B9                           STRING help8$, "h              displays this again"
 2B9  21068             help8: LOAD&RETURN s0, 68[help8$:"h"]
 2BA  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2BB  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2BC  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2BD  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2BE  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2BF  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2C0  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2C1  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2C2  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2C3  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2C4  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2C5  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2C6  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2C7  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2C8  21064                    LOAD&RETURN s0, 64[help8$:"d"]
 2C9  21069                    LOAD&RETURN s0, 69[help8$:"i"]
 2CA  21073                    LOAD&RETURN s0, 73[help8$:"s"]
 2CB  21070                    LOAD&RETURN s0, 70[help8$:"p"]
 2CC  2106C                    LOAD&RETURN s0, 6C[help8$:"l"]
 2CD  21061                    LOAD&RETURN s0, 61[help8$:"a"]
 2CE  21079                    LOAD&RETURN s0, 79[help8$:"y"]
 2CF  21073                    LOAD&RETURN s0, 73[help8$:"s"]
 2D0  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2D1  21074                    LOAD&RETURN s0, 74[help8$:"t"]
 2D2  21068                    LOAD&RETURN s0, 68[help8$:"h"]
 2D3  21069                    LOAD&RETURN s0, 69[help8$:"i"]
 2D4  21073                    LOAD&RETURN s0, 73[help8$:"s"]
 2D5  21020                    LOAD&RETURN s0, 20[help8$:" "]
 2D6  21061                    LOAD&RETURN s0, 61[help8$:"a"]
 2D7  21067                    LOAD&RETURN s0, 67[help8$:"g"]
 2D8  21061                    LOAD&RETURN s0, 61[help8$:"a"]
 2D9  21069                    LOAD&RETURN s0, 69[help8$:"i"]
 2DA  2106E                    LOAD&RETURN s0, 6E[help8$:"n"]
 2DB  2100A                    LOAD&RETURN s0, 0A
 2DC  2100D                    LOAD&RETURN s0, 0D



List of PSM files that have been assembled

Z:\home\dean\public_html\Xilinx\testpulses\src\roms\uart_test.psm



List of defined constants

 CONSTANT name      Value        Source PSM File

 timestamp_hours    14'd         
 timestamp_minutes  59'd         
 timestamp_seconds  11'd         
 datestamp_year     14'd         
 datestamp_month    1'd          
 datestamp_day      31'd         
 NUL                00           
 BEL                07           
 BS                 08           
 HT                 09           
 LF                 0A           
 VT                 0B           
 CR                 0D           
 ESC                1B           
 DEL                7F           
 DCS                90           
 ST                 9C           
 UART_STATUS_PORT   00000000'b   uart_test.psm
 UART_RX_PORT       00000001'b   uart_test.psm
 UART_TX_RESET_PORT 00           uart_test.psm
 LED_PORT           00000011'b   uart_test.psm
 SPI_PORT           00010011'b   uart_test.psm
 ONCEPORT           00100011'b   uart_test.psm
 INITPORT           00110011'b   uart_test.psm
 PERIOD_PORT2       01000011'b   uart_test.psm
 PERIOD_PORT1       01010011'b   uart_test.psm
 PERIOD_PORT0       01100011'b   uart_test.psm
 PULSE_PERIOD_PORT2 01110011'b   uart_test.psm
 PULSE_PERIOD_PORT1 10000011'b   uart_test.psm
 PULSE_PERIOD_PORT0 10010011'b   uart_test.psm
 UART_TX_PORT       11110011'b   uart_test.psm
 spi_clk            00000001'b   uart_test.psm
 spi_cs             00000010'b   uart_test.psm
 spi_mosi           10000000'b   uart_test.psm
 UART_TX_FULL       00000100'b   uart_test.psm
 UART_RX_READY      00001000'b   uart_test.psm



No TABLEs defined



List of text strings

 STRING name       String                                                        Source PSM File

 KCPSM6_version$   "v2.51"                                                       
 datestamp$        "31 Jan 2014"                                                 
 timestamp$        "14:59:11"                                                    
 dean$             "Hello, Dean!"                                                uart_test.psm
 error$            "Error, invalid input."                                       uart_test.psm
 help1$            "              G-2 Flight Tracker Simulator"                  uart_test.psm
 help2$            "d NXXX         set dac N to XXX/FFF*2.5V"                    uart_test.psm
 help3$            "c N XXXXX      set channel N start time to XXXXX (17 bits)"  uart_test.psm
 help4$            "s              fire pulses once"                             uart_test.psm
 help5$            "a              start continuous"                             uart_test.psm
 help6$            "z              stop continuous"                              uart_test.psm
 help7$            "p XXXXX        set period to XXXXX (17 bits) (8ns res)"      uart_test.psm
 help8$            "h              displays this again"                          uart_test.psm



List of line labels

   Label              Addr  Source PSM File

   STARTLOOP          020   uart_test.psm
   ldelay             02A   uart_test.psm
   sdelay             02C   uart_test.psm
   DLOOP              02E   uart_test.psm
   send_to_UART       031   uart_test.psm
   send_string        036   uart_test.psm
 * dean               03D   uart_test.psm
   error              04B   uart_test.psm
   next_line          062   uart_test.psm
   error_msg          067   uart_test.psm
 * upper_case         06F   uart_test.psm
 * ASCII_to_hex       075   uart_test.psm
   ASCII_letter       07F   uart_test.psm
   HEX_TO_BYTE        081   uart_test.psm
   HEX_TO_BYTE1       092   uart_test.psm
   HEX_TO_BYTE2       0A7   uart_test.psm
   HEX_TO_BYTE_ERR    0AB   uart_test.psm
   store_char         0AE   uart_test.psm
   check_special      0B1   uart_test.psm
   parse_buffer       0BB   uart_test.psm
   parse_backspace    0D4   uart_test.psm
   parse_UI_bs_done   0DD   uart_test.psm
   set_dac            0E2   uart_test.psm
   set_channel        0F1   uart_test.psm
   fire_once          117   uart_test.psm
   rapid_on           11C   uart_test.psm
   rapid_off          11F   uart_test.psm
   cont_start         122   uart_test.psm
   cont_stop          125   uart_test.psm
   period             128   uart_test.psm
   pulse_period       13E   uart_test.psm
   help_msg           154   uart_test.psm
   cmd_end            156   uart_test.psm
   send_spi           15C   uart_test.psm
   next_bit           15D   uart_test.psm
   clock_pulse        16A   uart_test.psm
   display_help       172   uart_test.psm
   help1              18D   uart_test.psm
   help2              1B9   uart_test.psm
   help3              1E3   uart_test.psm
   help4              21F   uart_test.psm
   help5              240   uart_test.psm
   help6              261   uart_test.psm
   help7              281   uart_test.psm
   help8              2B9   uart_test.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             78
 STAR              -

 AND               3
 OR                8
 XOR               -

 ADD              14
 ADDCY             1
 SUB              15
 SUBCY             -

 TEST              2
 TESTCY            -
 COMPARE          27
 COMPARECY         -

 SL0               7
 SL1               -
 SLX               -
 SLA               1
 RL                -
 SR0               2
 SR1               -
 SRX               -
 SRA               -
 RR                1

 REGBANK           -

 INPUT             3
 OUTPUT           24
 OUTPUTK           2

 STORE            27
 FETCH            27

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             63
 JUMP@             -
 CALL             55
 CALL@             1
 RETURN           25
 LOAD&RETURN     373

 HWBUILD           -



End of KCPSM6 log file.
