;;; ============================================================================
;;; EPP RAM test via UART UI
	;; Dan Gastler
	;; Boston University Electronics Design Facility
	;; 2013-10-18 v1.0
;;; ============================================================================

;;; ============================================================================
;;; Register map
;;; ============================================================================
;;; | name       | s0 | s1 | s2 | s3 | s4 | s5 | s6 | s7 | s8 | s9 | sA | sB |
;;; | soft_reset | x  |    |
;;; | hard_reset | x  | x  | x  |    |    |    |    |    |    |    | x  |  x |
;;; | start	 | x  | x  |
;;; | cli_loop   |
;;; | print_EOL  |
;;; ============================================================================
;;; Scratchpad memory map
;;; ============================================================================
CONSTANT CLI_BUFFER_START, 	00 	; Start of the UART buffer
CONSTANT CLI_BUFFER, 		20	; Current write pointer in the CLI buffer

CONSTANT CLI_COUNT,		23	; Number of valid parsed 16bit words on
					; the command line
CONSTANT CLI_WORD_1_POS,	24      ; position in CLI_BUFFER where WORD1 starts
CONSTANT CLI_WORD_2_POS,	25      ; position in CLI_BUFFER where WORD2 starts
CONSTANT CLI_WORD_3_POS,	26      ; position in CLI_BUFFER where WORD3 starts
CONSTANT CLI_WORD_4_POS,	27      ; position in CLI_BUFFER where WORD4 starts

CONSTANT CLI_WORD_1_SIZE,	28 	; number of nibbles in this word
CONSTANT CLI_WORD_2_SIZE,	29 	; number of nibbles in this word
CONSTANT CLI_WORD_3_SIZE,	2a 	; number of nibbles in this word
CONSTANT CLI_WORD_4_SIZE,	2b 	; number of nibbles in this word
	
CONSTANT CLI_WORD_1,		2c	; LSB of parsed word 1 (+ for MSB)
CONSTANT CLI_WORD_2,		30	; LSB of parsed word 1
CONSTANT CLI_WORD_3,		34	; LSB of parsed word 1
CONSTANT CLI_WORD_4,		38	; LSB of parsed word 1

CONSTANT MEM_USER_1,		40 	; Start of User mem block 1
CONSTANT MEM_USER_2,		80 	; Start of User mem block 2
CONSTANT MEM_USER_3,		C0 	; Start of User mem block 3 

CONSTANT MEM_SIZE, 		FF	; Size of our scratchpad memory

;;; ============================================================================
;;; Constants
;;; ============================================================================
CONSTANT UI_VERSION,	01

	;; input ports
CONSTANT FIFO_data, 03
CONSTANT FIFO_flags, 04

	;; constant out ports
CONSTANT UART_TX_RESET_PORT, 00

	;; output ports
CONSTANT INITPORT    , 00001000'b
CONSTANT ONCEPORT    , 00001001'b
CONSTANT LED_PORT,     00000010'b
CONSTANT SPI_PORT,     00000011'b
CONSTANT PERIOD_PORT0, 01000000'b
CONSTANT PERIOD_PORT1, 01000001'b
CONSTANT PERIOD_PORT2, 01000010'b
CONSTANT PULSE_PERIOD_PORT0, 01000100'b
CONSTANT PULSE_PERIOD_PORT1, 01000101'b
CONSTANT PULSE_PERIOD_PORT2, 01000110'b

CONSTANT CTRL_port, 00100000'b
CONSTANT C5_data, 11100000'b
CONSTANT RESET_fifo_port, 11100010'b

	;; spi bits
CONSTANT spi_clk,  00000001'b ;   spi_clk - bit0 (SPI_output_por0t)
CONSTANT spi_cs,   00000010'b ;  spi_cs - bit1 (SPI_output_port)
CONSTANT spi_mosi, 10000000'b ;  spi_mosi - bit7 (SPI_output_port)


NAMEREG	   sC, SPI_HIGH
NAMEREG    sD, SPI_LOW	

;;; ============================================================================
;;; START
;;; ============================================================================
start:		
	CALL hard_reset
	JUMP cli_loop

INCLUDE "uart.psm"
INCLUDE "utils.psm"
INCLUDE "spi.psm"
	
;;; ============================================================================
;;; Reset the hardware and software to initial conditions
	;; uses s0 - s1
;;; ============================================================================
STRING startup$, "CLI V:"
str_startup:
	LOAD&RETURN s1, startup$
	LOAD&RETURN s1, 00
hard_reset:

	LOAD	sF, FF
	LOAD	sE, FF
	LOAD	sB, FF

start_delay:
	SUB 	sF, 01
	SUBCY	sE, 00
	SUBCY	sB, 00
	JUMP	NZ, start_delay
	
	CALL soft_reset
	;; reset UART
	OUTPUTK 03, UART_OUTPUT
	OUTPUTK 00, UART_OUTPUT

	;; print version
	LOAD sB,str_startup'upper
	LOAD sA,str_startup'lower
	CALL util_print_string

	LOAD s0, UI_VERSION
	CALL util_byte_to_hex
	CALL uart_output_wait
	OUTPUT s2, UART_OUTPUT
	CALL uart_output_wait
	OUTPUT s1, UART_OUTPUT

	CALL util_print_EOL
	
	CALL util_print_prompt
	RETURN
;;; ============================================================================
;;; Reset the software to initial conditions
	;; uses s0
;;; ============================================================================
soft_reset:	
	;; reset UART Buffer
	LOAD s0, 00
	STORE s0, CLI_BUFFER
	STORE s0, CLI_COUNT
	RETURN


INCLUDE "cmds.psm"

;;; ============================================================================
;;; Main UART UI LOOP
	;; uses s0-s1
;;; ============================================================================
cli_loop:
	CALL uart_input_wait 		; wait for input
	INPUT s0, UART_INPUT		; read new char from UART

	FETCH s1, CLI_BUFFER		; get current write pointer
	ADD s1, CLI_BUFFER_START	; add CLI_BUFFER_START	
	STORE s0, (s1) 			; store input in CLI_BUFFER

	FETCH s1, CLI_BUFFER 		; update CLI_BUFFER	 
	ADD s1, 01
	STORE s1, CLI_BUFFER		; 

	COMPARE s1, CLI_BUFFER		; check for CLI BUFFER overflow
	JUMP NC, cli_overflow 
	
	CALL cli_process		; process the new char
					; return C=1 if a command 

	CALL C, cmd_find		; process a new command
	JUMP cli_loop
;;; ============================================================================	
;;; Error for UI overflow
	;; uses s0-s1
;;; ============================================================================
STRING overflow$, "Overflow!"
str_overflow:
	LOAD&RETURN s1, overflow$
	LOAD&RETURN s1, 00
cli_overflow:
	CALL util_print_EOL		
	LOAD sB, str_overflow'upper
	LOAD sA, str_overflow'lower
	CALL util_print_string
	
	CALL util_print_EOL		
	
	CALL soft_reset
	CALL util_print_prompt
	JUMP cli_loop

	
;;; ============================================================================
;;; parse the current text inputted by the user
	;; check for special characters
	;; echo back to use if needed
	;; set C = 1 if the user pressed enter
	;; uses s0-s1
;;; ============================================================================
cli_process:
	;; check last char for something special
	FETCH s0, CLI_BUFFER
	SUB s0, 01
	FETCH s1, (s0)		; load the last ASCII into s0
	
	COMPARE s1, 0D		; check for CR
	JUMP Z, cli_process_cmd

	COMPARE s1, 0A		; check for LF
	JUMP Z, cli_process_cmd
	
	COMPARE s1, 08		; check for backspace
	JUMP Z, cli_process_bs

	COMPARE s1, 20		; check for other special char 
	JUMP NC, cli_process_text ; jump for user text
	;; remove special char
	FETCH s0, CLI_BUFFER
	SUB s0, 01
	STORE s0, CLI_BUFFER
	LOAD s0, 00
	RR s0			; set C to zero (no command)
	RETURN
cli_process_text:	
	CALL uart_output_wait 	; nothing special
	OUTPUT s1, UART_OUTPUT	; echo char back to user
	LOAD s0, 00
	RR s0			; set C to zero (no command)
	RETURN

	
cli_process_cmd:
	;; respond with EOL
	CALL util_print_EOL
	;; remove the CR/LF character from memory
	FETCH s0, CLI_BUFFER
	SUB s0, 01 ; remove CR/LF from memory
	STORE s0, CLI_BUFFER
	
	;; return with C = 1
	LOAD s0, 01
	RR s0			; set C to one
	RETURN
	
cli_process_bs:
	FETCH s0, CLI_BUFFER 	; check if there is anything to bs into
	SUB s0,02		; because we've already moved 1 ahead in CLI_BUFFER
	JUMP C, cli_process_bs_done

	;; update display
	CALL uart_output_wait
	LOAD s1, 08		; backspace	
	OUTPUT s1, UART_OUTPUT	
	CALL uart_output_wait
	LOAD s1, " "		; blank (clears bad char)
	OUTPUT s1, UART_OUTPUT	
	
	CALL uart_output_wait
	LOAD s1, 08
	OUTPUT s1, UART_OUTPUT	; correctly sets next input char pos on screen

	;; we need to remove a total of two chars from buffer (bad + bs)
	;; remove one of them and leave one
	FETCH s0, CLI_BUFFER	
	SUB s0, 01	
	STORE s0, CLI_BUFFER
cli_process_bs_done:
	;; We need to remove one character from buffer
	FETCH s0, CLI_BUFFER	
	SUB s0, 01	
	STORE s0, CLI_BUFFER
	;; set C to zero since there was no command
	LOAD s0, 00
	RR s0			; set C to zero because there is no new command
	RETURN

